definitions:
  steps:
    - step: &build-docker-image
        name: 'Build Docker Image'
        script:
          - docker build --build-arg ARCH=amd64 --tag "${BITBUCKET_REPO_SLUG}:local" .
          - docker save "${BITBUCKET_REPO_SLUG}:local" --output "${BITBUCKET_REPO_SLUG}.tar"
        services:
          - docker
        caches:
          - docker
        artifacts:
          - "*.tar"
    - step: &build-and-test
        name: 'Build and Test'
        image: bats/bats:1.9.0
        script:
          - echo "Running tests...."
          - test/gen_sbom.bats --timing --show-output-of-passing-tests --verbose-run
    - step: &shell-check
        name: 'Shell Lint'
        image: koalaman/shellcheck-alpine:v0.9.0
        script:
          - echo "Linting shell scripts"
          - shellcheck -x *.sh **/*.bats
    - step: &docker-lint
        name: 'Docker Lint'
        image: hadolint/hadolint:v2.12.0-alpine
        script:
          - echo "Linting Dockerfile(s)"
          - hadolint Dockerfile
    - step: &markdown-lint
        name: 'Markdown Lint'
        image: markdownlint/markdownlint:0.13.0
        script:
          - echo "Linting Markdown Files"
          - mdl *.md || echo "Potential mdlint issues found..."

pipelines:
  default:
    - parallel:
        - step: *build-and-test
        - step: *shell-check
        - step: *docker-lint
        - step: *markdown-lint
        - step: *build-docker-image
  custom:
    push to Dockerhub (dev):
      - step: *build-docker-image
      - step:
          name: 'Publish Dev Docker Image'
          deployment: Development
          script:
            - echo ${DOCKERHUB_PASSWORD} | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
            - IMAGE_NAME=$BITBUCKET_REPO_SLUG
            - docker load --input "${BITBUCKET_REPO_SLUG}.tar"
            - docker tag "${BITBUCKET_REPO_SLUG}:local" "${DOCKERHUB_NAMESPACE}/${BITBUCKET_REPO_SLUG}:${DEV_VERSION}-${BITBUCKET_BUILD_NUMBER}"
            - docker push "${DOCKERHUB_NAMESPACE}/${BITBUCKET_REPO_SLUG}:${DEV_VERSION}-${BITBUCKET_BUILD_NUMBER}"
          services:
            - docker
    Prod Release:
      - variables:
          - name: PRODUCTION_VERSION
      - step: *build-docker-image
      - stage:
          name: Deploy to Prod
          deployment: Production
          steps:
            - step:
                name: 'Publish Prod Docker Image'
                script:
                  - echo ${DOCKERHUB_PASSWORD} | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
                  - docker load --input "${BITBUCKET_REPO_SLUG}.tar"
                  - docker tag "${BITBUCKET_REPO_SLUG}:local" "${DOCKERHUB_NAMESPACE}/${BITBUCKET_REPO_SLUG}:${PRODUCTION_VERSION}"
                  - docker push "${DOCKERHUB_NAMESPACE}/${BITBUCKET_REPO_SLUG}:${PRODUCTION_VERSION}"
                services:
                  - docker
                caches:
                  - docker
            - step:
                name: tag branch
                image: alpine/git:1.0.26
                script:
                  - git tag -a "v${PRODUCTION_VERSION}" -m "release version ${PRODUCTION_VERSION}"
                  - git push origin "v${PRODUCTION_VERSION}"
